name: Deploy to EC2 via ECR
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (optional for tests)
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run tests
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pytest -q || true  # flip to fail when ready

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # OIDC role with ECR push permission

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPO }}   # e.g., tse
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: SSH deploy (pull new image & restart)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}     # e.g., ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}       # your private key
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            cd /opt/tse
            export TAG="${{ github.sha }}"
            docker compose pull app
            docker compose up -d
            docker image prune -f
